var documenterSearchIndex = {"docs":
[{"location":"tutorial-nonfreqdims/#Non-frequency-dimensions","page":"Non-frequency dimensions","title":"Non-frequency dimensions","text":"","category":"section"},{"location":"ref-exceptions/#Exceptions","page":"Exceptions","title":"Exceptions","text":"","category":"section"},{"location":"tutorial-phosphorylation/#2D-phosphorylation-kinetics","page":"2D phosphorylation kinetics","title":"2D phosphorylation kinetics","text":"","category":"section"},{"location":"utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"utilities/#Combining-NMR-experiments","page":"Utilities","title":"Combining NMR experiments","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"sumexpts(INPUTFILES...; out=OUTPUT) is a utility function provided by NMRTools that allows you to combine multiple Bruker NMR experiments with optional weighting factors. The function accepts the following parameters:","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"INPUTFILES...: One or more experiment numbers or paths to be combined\nout: The experiment number or path where the combined data will be stored (keyword argument)","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"The function works with both 1D experiments (using fid files) and multidimensional experiments (using ser files).","category":"page"},{"location":"utilities/#Basic-usage","page":"Utilities","title":"Basic usage","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"The most common way to use sumexpts is with experiment numbers, which is the standard Bruker convention.","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"julia> using NMRTools\n\njulia> cd(\"myexperiment\")\n\njulia> sumexpts(11, 12, out=999)\n=== NMR Experiment Summation ===\nOutput: 999\nInputs: 11, 12\nWeights: 1.0, 1.0\nCreated output experiment from 11\nData format: Float64 (little-endian)\nDetected nD experiment, using ser files\nCleaning processed data files in pdata/1...\n  Removed: 3rrr\nRemoved pdata/101 directory\nRemoved pdata/999 directory\nLoading 11/ser\nLoading 12/ser\nApplied weight 1.0 to experiment 11\nApplied weight 1.0 to experiment 12\nWriting output to 999/ser\nScans from 11: 8 × 1.0 = 8.0\nScans from 12: 16 × 1.0 = 16.0\nUpdated number of scans to 24\nUpdated title file with experiment summary\n=== Operation completed successfully ===","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"This creates a new experiment directory by copying experiment 11 as a template, then adding the raw data from all input experiments together. The result is stored in experiment 999.","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"You can also use full paths if your experiments are in different directories:","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"# Combine experiments from a specific path\njulia> sumexpts(\"myexperiment/11\", \"myexperiment/12\", out=\"myexperiment/999\")\n# Output similar to above example","category":"page"},{"location":"utilities/#Adding-multiple-experiments","page":"Utilities","title":"Adding multiple experiments","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"To combine more than two experiments, simply provide all experiment numbers:","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"# Add three experiments together\njulia> cd(\"myexperiment\")\n\njulia> sumexpts(11, 12, 13, out=999)\n# Output shows all three experiments being combined","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"By default, all experiments are weighted equally. The result will be the sum of all input data.","category":"page"},{"location":"utilities/#Creating-difference-spectra","page":"Utilities","title":"Creating difference spectra","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"To create a difference spectrum, use the weights parameter:","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"# Create a difference spectrum (experiment 12 subtracted from experiment 11)\njulia> cd(\"myexperiment\")\n\njulia> sumexpts(11, 12, out=999, weights=[1.0, -1.0])\n=== NMR Experiment Summation ===\nOutput: 999\nInputs: 11, 12\nWeights: 1.0, -1.0\nCreated output experiment from 11\nData format: Float64 (little-endian)\nDetected nD experiment, using ser files\nCleaning processed data files in pdata/1...\n  Removed: 2rr\nLoading 11/ser\nLoading 12/ser\nApplied weight 1.0 to experiment 11\nApplied weight -1.0 to experiment 12\nWriting output to 999/ser\nScans from 11: 16 × 1.0 = 16.0\nScans from 12: 16 × 1.0 = 16.0\nUpdated number of scans to 32\nUpdated title file with experiment summary\n=== Operation completed successfully ===","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"This is particularly useful for applications like:","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"Reaction monitoring\nComparing before/after spectra\nHighlighting changes between samples\nRemoving background signals","category":"page"},{"location":"utilities/#Weighted-combinations","page":"Utilities","title":"Weighted combinations","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"You can apply different weights to each experiment to create weighted averages or to emphasize certain spectra:","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"# Weighted combination of three experiments\njulia> cd(\"myexperiment\")\n\njulia> sumexpts(11, 12, 13, out=999, weights=[0.5, 1.0, 2.0])\n=== NMR Experiment Summation ===\nOutput: 999\nInputs: 11, 12, 13\nWeights: 0.5, 1.0, 2.0\nCreated output experiment from 11\nData format: Float64 (little-endian)\nDetected nD experiment, using ser files\nCleaning processed data files in pdata/1...\nLoading 11/ser\nLoading 12/ser\nLoading 13/ser\nApplied weight 0.5 to experiment 11\nApplied weight 1.0 to experiment 12\nApplied weight 2.0 to experiment 13\nWriting output to 999/ser\nScans from 11: 8 × 0.5 = 4.0\nScans from 12: 16 × 1.0 = 16.0\nScans from 13: 32 × 2.0 = 64.0\nUpdated number of scans to 84\nUpdated title file with experiment summary\n=== Operation completed successfully ===","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"The weights vector must have the same length as the number of input experiments.","category":"page"},{"location":"utilities/#Experimental-details","page":"Utilities","title":"Experimental details","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"The function handles several important details automatically:","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"The number of scans (NS parameter) in the output is updated to the weighted sum of input scan counts\nThe title file is updated to indicate which experiments were combined and their weights\nProcessed data files in pdata/1 are removed to prevent inconsistencies\nIf experiments have different data sizes, they are truncated to match the smallest dataset","category":"page"},{"location":"utilities/#Command-line-usage","page":"Utilities","title":"Command-line usage","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"The function can also be called from the command line:","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"cd myexperiment\njulia -e 'using NMRTools; sumexpts(11, 12, out=999)'","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"Or for creating a difference spectrum:","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"cd myexperiment\njulia -e 'using NMRTools; sumexpts(11, 12, out=999, weights=[1.0, -1.0])'","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"This allows for easy integration with processing workflows and shell scripts.","category":"page"},{"location":"tutorial-relaxation/#1D-relaxation-analysis","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"","category":"section"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"Let's analyse a measurement of 1H T2 relaxation, acquired as a single pseudo-2D spectrum. First, we need to load the required packages. We will use LsqFit for the non-linear least squares fitting, Measurements to handle uncertainties, and Statistics for calculation of means and standard deviations.","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"Data have been processed in Topspin (using xf2), so can be loaded using the loadnmr function.","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"using NMRTools\nusing Plots\nusing LsqFit\nusing Measurements\nusing Statistics\n\nspec = exampledata(\"pseudo2D_T2\")\nnothing # hide","category":"page"},{"location":"tutorial-relaxation/#Set-up-parameters","page":"1D relaxation analysis","title":"Set up parameters","text":"","category":"section"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"The experiment uses a vclist to encode the relaxation time. The contents of this list are automatically parsed when the spectrum is loaded, and can be accessed with the acqus command:","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"acqus(spec, :vclist)","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"Each loop corresponds to a delay of 4 ms, so from this we can calculate a list of relaxation times. The spectrum we have just loaded has an UnknownDimension as the non-frequency dimension. We need to replace this with a TrelaxDimension that encodes the relaxation delays, and we can do this with the setrelaxtimes function:","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"τ = acqus(spec, :vclist) * 4e-3\nspec = setrelaxtimes(spec, τ, \"s\")\nnothing # hide","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"Next, we specify the chemical shift ranges used for plotting, fitting, and for determination of the noise level.","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"plotrange = 0.7 .. 1.0 # ppm\ndatarange = 0.8 .. 0.9 # ppm\nnoiseposition = -2 # ppm\nnothing # hide","category":"page"},{"location":"tutorial-relaxation/#Plot-the-data","page":"1D relaxation analysis","title":"Plot the data","text":"","category":"section"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"To take a quick look at the data, we can plot the experiment either as 3D lines using the plot command, or as a heatmap:","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"plot(\n    plot(spec[plotrange,:]),\n    heatmap(spec[plotrange,:])\n)\nsavefig(\"tutorial-relax-plot.svg\"); nothing # hide","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"(Image: )","category":"page"},{"location":"tutorial-relaxation/#Calculate-noise-and-peak-integrals","page":"1D relaxation analysis","title":"Calculate noise and peak integrals","text":"","category":"section"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"Now, we can determine the measurement noise, by taking the standard deviation of integrals across the different gradient points:","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"# create a selector for the noise, matching the width of the data range\nnoisewidth = datarange.right - datarange.left\nnoiserange = (noiseposition-0.5noisewidth)..(noiseposition+0.5noisewidth)\n\n# integrate over the noise regions and take the standard deviation\n# (calculate the sum over the frequency dimension F1Dim, and use\n# `data` to convert from NMRData to a regular array)\nnoise = sum(spec[noiserange,:], dims=F1Dim) |> data |> std\n\n# calculate the integral of the data region similarly, using vec to convert to a list\nintegrals = sum(spec[datarange,:], dims=F1Dim) |> data |> vec\n\n# normalise noise and integrals by the maximum value\nnoise /= maximum(integrals)\nintegrals /= maximum(integrals)\nnothing # hide","category":"page"},{"location":"tutorial-relaxation/#Fitting","page":"1D relaxation analysis","title":"Fitting","text":"","category":"section"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"Now, we can fit the data to an exponential decay using the LsqFit package:","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"# model parameters are (I0, R2)\nfunction model(t, p)\n    I0 = p[1]\n    R2 = p[2]\n    @. I0 * exp(-R2 * t)\nend\n\np0 = [1.0, 1.0] # rough guess of initial parameters\n\nfit = curve_fit(model, τ, integrals, p0) # run the fit\n\n# extract the fit parameters and standard errors\npfit = coef(fit)\nerr = stderror(fit)\nR2 = (pfit[2] ± err[2])","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"So we see that the fitted R₂ relaxation rate is 0.844 ± 0.016 s⁻¹","category":"page"},{"location":"tutorial-relaxation/#Plot-the-results","page":"1D relaxation analysis","title":"Plot the results","text":"","category":"section"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"Finally, plot the results:","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"# calculate the best-fit curve across 100 points so it looks nice and smooth\nx = LinRange(0, maximum(τ)*1.1, 100)\nyfit = model(x, pfit)\n\np1 = scatter(τ, integrals .± noise, label=\"observed\",\n        frame=:box,\n        xlabel=\"Relaxation time (s)\",\n        ylabel=\"Integrated signal\",\n        title=\"\",\n        ylims=(0,Inf), # make sure y axis starts at zero\n        widen=true,\n        grid=nothing)\nplot!(p1, x, yfit, label=\"fit (R₂ = $R2 s⁻¹)\")\n\np2 = plot(spec[plotrange,1],linecolor=:black)\nplot!(p2, spec[datarange,1], fill=(0,:orange), linecolor=:red)\nhline!(p2, [0], c=:grey)\ntitle!(p2, \"\")\n\nplot(p1, p2, layout=(1,2))\nsavefig(\"tutorial-relax-fit.svg\"); nothing # hide","category":"page"},{"location":"tutorial-relaxation/","page":"1D relaxation analysis","title":"1D relaxation analysis","text":"(Image: )","category":"page"},{"location":"ref-io/#File-I/O","page":"File I/O","title":"File I/O","text":"","category":"section"},{"location":"indexes/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"indexes/#NMRBase","page":"Index","title":"NMRBase","text":"","category":"section"},{"location":"indexes/","page":"Index","title":"Index","text":"Modules = [NMRTools.NMRBase]","category":"page"},{"location":"indexes/#NMRIO","page":"Index","title":"NMRIO","text":"","category":"section"},{"location":"indexes/","page":"Index","title":"Index","text":"Modules = [NMRTools.NMRIO]","category":"page"},{"location":"tutorial-animation/#Animating-spectra","page":"Animating spectra","title":"Animating spectra","text":"","category":"section"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"The plot recipes defined within NMRTools provide an easy way to generate animations of spectral data, using the @animate macro defined within the Plots package. A couple of examples are provided below.","category":"page"},{"location":"tutorial-animation/#Phosphorylation-kinetics","page":"Animating spectra","title":"Phosphorylation kinetics","text":"","category":"section"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"First, load in some data. This pseudo-3D kinetic data - a series of 1H,15N SOFAST-HMQC spectra - showing the progressive phosphorylation of cJun by JNK1 kinase. Read more about the paper here: Waudby et al. Nat Commun (2022).","category":"page"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"using NMRTools, Plots\n\nspec=exampledata(\"pseudo3D_kinetics\")\nnothing # hide","category":"page"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"The data have been processed in Topspin using ftnd 3 and ftnd 2, so that the final dimension of the 3D represents the phosphorylation time. Each 2D plane took 2 minutes to acquire, and there was an initial delay of 4 min between adding the kinase and recording the first free induction decay. We need to calculate a list of times from this information, that we can use to label the animation:","category":"page"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"# get number of time points\nnt = size(spec,3)\n\n# calculate a list of measurement times\n# experiment was recorded with 2 min per spectrum, plus initial dead-time of 4 min\ntmin = LinRange(0, 2*(nt-1), nt) .+ 4\nthr = tmin / 60","category":"page"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"Now we can generate the animation, by looping over each point in the time series with the Plots @animate macro, then saving as an animated gif.","category":"page"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"anim = @animate for i=1:nt\n    # generate a nice title with the time rounded to 1 decimal place, e.g. \"Time elapsed: 0.1 hr\"\n    titletext = \"Time elapsed: $(round(thr[i],digits=1)) hr\"\n    plot(spec[:,:,i], title=titletext)\nend\n\n# save as an animated gif\ngif(anim, \"kinetics.gif\", fps=30)\nnothing # hide","category":"page"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"(Image: )","category":"page"},{"location":"tutorial-animation/#2D-titration","page":"Animating spectra","title":"2D titration","text":"","category":"section"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"First, load in some data - as described in the tutorial on plotting.","category":"page"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"spectra2d = exampledata(\"2D_HN_titration\")\nnothing # hide","category":"page"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"Now loop over the spectra to produce the animation:","category":"page"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"refspec = spectra2d[1]\nanim=@animate for spec in spectra2d\n    plot(spec, xlims=(6,10.5), title=label(spec), normalize=refspec)\nend\n\ngif(anim, \"titration.gif\", fps=8)\nnothing # hide","category":"page"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"(Image: )","category":"page"},{"location":"tutorial-animation/","page":"Animating spectra","title":"Animating spectra","text":"!!! note Normalization     The normalize=refspec parameter scales all spectra relative to the reference spectrum, defined on the first line     as the first spectrum in the titration series. This ensures that contour levels are directly comparable across the     different spectra. This normalization automatically compensates for differences in acquisition parameters such as     number of scans and receiver gain that would otherwise affect absolute intensities.","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#NMRBase","page":"API","title":"NMRBase","text":"","category":"section"},{"location":"api/#NMRTools.NMRBase.AbstractNMRData","page":"API","title":"NMRTools.NMRBase.AbstractNMRData","text":"AbstractNMRData <: DimensionalData.AbstractDimArray\n\nAbstract supertype for objects that wrap an array of NMR data, and metadata about its contents.\n\nAbstractNMRDatas inherit from AbstractDimArray from DimensionalData.jl. They can be indexed as regular Julia arrays or with DimensionalData.jl Dimensions.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.Coherence","page":"API","title":"NMRTools.NMRBase.Coherence","text":"Coherence\n\nAbstract supertype for representing coherences.\n\nSee also SQ, MQ.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.ComplexLineshape","page":"API","title":"NMRTools.NMRBase.ComplexLineshape","text":"ComplexLineshape\n\nReturn a complex-valued lineshape when used in calculations\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.CosWindow","page":"API","title":"NMRTools.NMRBase.CosWindow","text":"CosWindow(tmax)\n\nApodization by a pure cosine function. Acquisition time is tmax.\n\nSee also Cos²Window, SineWindow.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.Cos²Window","page":"API","title":"NMRTools.NMRBase.Cos²Window","text":"Cos²Window(tmax)\n\nApodization by a pure cosine squared function. Acquisition time is tmax.\n\nSee also CosWindow, SineWindow.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.ExponentialWindow","page":"API","title":"NMRTools.NMRBase.ExponentialWindow","text":"ExponentialWindow(lb, tmax)\n\nExponential window function, with a line broadening of lb Hz. Acquisition time is tmax.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.FrequencyDimension","page":"API","title":"NMRTools.NMRBase.FrequencyDimension","text":"FrequencyDimension <: NMRDimension\n\nAbstract supertype for frequency dimensions used in NMRData objects. Concrete types F1Dim, F2Dim, F3Dim and F4Dim are generated for use in creating objects.\n\nSee also NonFrequencyDimension.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.GaussWindow","page":"API","title":"NMRTools.NMRBase.GaussWindow","text":"GaussWindow(expHz, gaussHz, center, tmax)\n\nAbstract representation of Lorentz-to-Gauss window functions, applying an inverse exponential of expHz Hz, and a gaussian broadening of gaussHz Hz, with maximum at center (between 0 and 1). Acquisition time is tmax.\n\nSpecialises to LorentzToGaussWindow when center is zero, otherwise GeneralGaussWindow.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.GradientDimension","page":"API","title":"NMRTools.NMRBase.GradientDimension","text":"GradientDimension <: NonFrequencyDimension <: NMRDimension\n\nAbstract supertype for gradient-encoded dimensions used in NMRData objects. Concrete types G1Dim, G2Dim, G3Dim and G4Dim are generated for use in creating objects.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.HasNonFrequencyDimension","page":"API","title":"NMRTools.NMRBase.HasNonFrequencyDimension","text":"@traitdef HasNonFrequencyDimension{D}\n\nA trait indicating whether the data object has a non-frequency domain dimension.\n\nExample\n\n@traitfn f(x::X) where {X; HasNonFrequencyDimension{X}} = \"This spectrum has a non-frequency domain dimension!\"\n@traitfn f(x::X) where {X; SimpleTraits.Not{HasNonFrequencyDimension{X}}} = \"This is a pure frequency-domain spectrum!\"\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.LineshapeComplexity","page":"API","title":"NMRTools.NMRBase.LineshapeComplexity","text":"LineshapeComplexity\n\nAbstract type to specify calculation of RealLineshape or ComplexLineshape in function calls.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.MQ","page":"API","title":"NMRTools.NMRBase.MQ","text":"MQ(coherences, label==\"\")\n\nRepresentation of a multiple-quantum coherence. Coherences are specified as a tuple of tuples, of the form (nucleus, coherenceorder)\n\nExamples\n\njulia> MQ(((H1,1), (C13,-1)), \"ZQ\")\nMQ(((H1, 1), (C13, -1)), \"ZQ\")\n\njulia> MQ(((H1,3), (C13,1)), \"QQ\")\nMQ(((H1, 3), (C13, 1)), \"QQ\")\n\nSee also Nucleus, SQ.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.NMRData","page":"API","title":"NMRTools.NMRBase.NMRData","text":"NMRData <: AbstractNMRData\nNMRData(A::AbstractArray{T,N}, dims; kw...)\nNMRData(A::AbstractNMRData; kw...)\n\nA generic AbstractNMRData for NMR array data. It holds memory-backed arrays.\n\nKeywords\n\ndims: Tuple of NMRDimensions for the array.\nname: Symbol name for the array, which will also retreive named layers if NMRData   is used on a multi-layered file like a NetCDF.\nmissingval: value representing missing data, normally detected from the file. Set manually   when you know the value is not specified or is incorrect. This will not change any   values in the NMRData, it simply assigns which value is treated as missing.\n\nInternal Keywords\n\nIn some cases it is possible to set these keywords as well.\n\ndata: can replace the data in an AbstractNMRData\nrefdims: Tuple of position Dimensions the array was sliced from, defaulting to ().\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.NMRDimension","page":"API","title":"NMRTools.NMRBase.NMRDimension","text":"NMRDimension\n\nAbstract supertype for all axes used in NMRData objects.\n\nSee also FrequencyDimension and NonFrequencyDimension.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.NMRToolsError","page":"API","title":"NMRTools.NMRBase.NMRToolsError","text":"NMRToolsError(message)\n\nAn error arising in NMRTools.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.NonFrequencyDimension","page":"API","title":"NMRTools.NMRBase.NonFrequencyDimension","text":"NonFrequencyDimension <: NMRDimension\n\nAbstract supertype for non-frequency dimensions used in NMRData objects. Sub-types include TimeDimension, GradientDimension,  and UnknownDimension.\n\nSee also FrequencyDimension.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.Nucleus","page":"API","title":"NMRTools.NMRBase.Nucleus","text":"Nucleus\n\nEnumeration of common nuclei associated with biomolecular NMR. Nuclei are named e.g. H1, C13.\n\nDefined nuclei: H1, H2, C12, C13, N14, N15, F19, P31.\n\nSee also spin, gyromagneticratio, Coherence.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.NullWindow","page":"API","title":"NMRTools.NMRBase.NullWindow","text":"NullWindow(tmax)\n\nNo apodization applied. Acquisition time is tmax.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.RealLineshape","page":"API","title":"NMRTools.NMRBase.RealLineshape","text":"RealLineshape\n\nReturn a real-valued lineshape when used in calculations\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.SQ","page":"API","title":"NMRTools.NMRBase.SQ","text":"SQ(nucleus::Nucleus, label==\"\")\n\nRepresentation of a single quantum coherence on a given nucleus.\n\nSee also Nucleus, MQ.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.SineWindow","page":"API","title":"NMRTools.NMRBase.SineWindow","text":"SineWindow(offset, endpoint, power, tmax)\n\nAbstract window function representing multiplication by sine/cosine functions. Acquisition time is tmax.\n\nleftsinleft(\n    picdotmathrmoffset +\n    fracleft(mathrmend - mathrmoffsetright)pi tmathrmtmax\n    right)right^mathrmpower\n\nSpecialises to CosWindow, Cos²Window or GeneralSineWindow.\n\nArguments\n\noffset: initial value is sin(mathrmoffsetcdotpi) (0 to 1)\nendpoint: initial value is sin(mathrmendpointcdotpi) (0 to 1)\npow: sine exponent\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.TimeDimension","page":"API","title":"NMRTools.NMRBase.TimeDimension","text":"TimeDimension <: NonFrequencyDimension <: NMRDimension\n\nAbstract supertype for time dimensions used in NMRData objects. Concrete types T1Dim, T2Dim, T3Dim and T4Dim are generated for time-domains representing frequency evolution, and TrelaxDim and TkinDim are generated for representing relaxation and real-time kinetics.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.UnknownDimension","page":"API","title":"NMRTools.NMRBase.UnknownDimension","text":"UnknownDimension <: NonFrequencyDimension <: NMRDimension\n\nAbstract supertype for unknown, non-frequency dimensions used in NMRData objects. Concrete types X1Dim, X2Dim, X3Dim and X4Dim are generated for use in creating objects.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.UnknownWindow","page":"API","title":"NMRTools.NMRBase.UnknownWindow","text":"UnknownWindow(tmax)\n\nUnknown apodization applied. Acquisition time is tmax.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRBase.WindowFunction","page":"API","title":"NMRTools.NMRBase.WindowFunction","text":"WindowFunction\n\nAbstract type to represent apodization functions.\n\nWindow functions are represented by subtypes of the abstract type WindowFunction, each of which contain appropriate parameters to specify the particular function applied. In addition, the acquisition time tmax is also stored (calculated at the point the window function is applied, i.e. after linear prediction but before zero filling).\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.stack-Union{Tuple{Vector{D}}, Tuple{D}, Tuple{N}, Tuple{T}} where {T, N, D<:(AbstractNMRData{T, N})}","page":"API","title":"Base.stack","text":"stack(expts::Vector{NMRData})\n\nCombine a collection of equally-sized NMRData into one larger array, by arranging them along a new dimension, of type UnknownDimension.\n\nThrows a DimensionMismatch if data are not of compatible shapes.\n\n\n\n\n\n","category":"method"},{"location":"api/#DimensionalData.Dimensions.Lookups.metadata","page":"API","title":"DimensionalData.Dimensions.Lookups.metadata","text":"metadata(nmrdata, key)\nmetadata(nmrdata, dim, key)\nmetadata(nmrdimension, key)\n\nReturn the metadata for specified key, or nothing if not found. Keys are passed as symbols.\n\nExamples (spectrum metadata)\n\n:ns: number of scans\n:ds: number of dummy scans\n:rg: receiver gain\n:ndim: number of dimensions\n:title: spectrum title (contents of title pdata file)\n:filename: spectrum filename\n:pulseprogram: title of pulse program used for acquisition\n:experimentfolder: path to experiment\n:noise: RMS noise level\n\nExamples (dimension metadata)\n\n:pseudodim: flag indicating non-frequency domain data\n:npoints: final number of (real) data points in dimension (after extraction)\n:td: number of complex points acquired\n:tdzf: number of complex points when FT executed, including LP and ZF\n:bf: base frequency, in MHz\n:sf: carrier frequency, in MHz\n:offsethz: carrier offset from bf, in Hz\n:offsetppm: carrier offset from bf, in ppm\n:swhz: spectrum width, in Hz\n:swppm: spectrum width, in ppm\n:region: extracted region, expressed as a range in points, otherwise missing\n:window: WindowFunction indicating applied apodization\n:referenceoffset: referencing (in ppm) applied to the dimension\n\nSee also estimatenoise!.\n\n\n\n\n\n","category":"function"},{"location":"api/#DimensionalData.Dimensions.Lookups.units","page":"API","title":"DimensionalData.Dimensions.Lookups.units","text":"units(nmrdata)\nunits(nmrdata, dim)\nunits(nmrdimension)\n\nReturn the physical units associated with an NMRData structure or an NMRDimension.\n\n\n\n\n\n","category":"function"},{"location":"api/#DimensionalData.Dimensions.label","page":"API","title":"DimensionalData.Dimensions.label","text":"label(nmrdata)\nlabel(nmrdata, dim)\nlabel(nmrdimension)\n\nReturn a short label associated with an NMRData structure or an NMRDimension. By default, for a spectrum this is obtained from the first line of the title file. For a frequency dimension, this is normally something of the form 1H chemical shift (ppm).\n\nSee also label!.\n\n\n\n\n\n","category":"function"},{"location":"api/#NMRTools.NMRBase._lineshape","page":"API","title":"NMRTools.NMRBase._lineshape","text":"_lineshape(ω, R2, ωaxis, window, complexity)\n\nInternal function to calculate a resonance lineshape with frequency ω and relaxation rate R2, calculated at frequencies ωaxis and with apodization according to the specified window function.\n\n\n\n\n\n","category":"function"},{"location":"api/#NMRTools.NMRBase.acqus-Tuple{AbstractNMRData}","page":"API","title":"NMRTools.NMRBase.acqus","text":"acqus(nmrdata)\nacqus(nmrdata, key)\nacqus(nmrdata, key, index)\n\nReturn data from a Bruker acqus file, or nothing if it does not exist. Keys can be passed as symbols or strings. If no key is specified, a dictionary is returned representing the entire acqus file.\n\nIf present, the contents of auxilliary files such as vclist and vdlist can be accessed using this function.\n\nExamples\n\njulia> acqus(expt, :pulprog)\n\"zgesgp\"\njulia> acqus(expt, \"TE\")\n276.9988\njulia> acqus(expt, :p, 1)\n9.2\njulia> acqus(expt, \"D\", 1)\n0.1\njulia> acqus(expt, :vclist)\n11-element Vector{Int64}:\n[...]\n\nSee also metadata.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.add_offset-Tuple{Any, Any, Any}","page":"API","title":"NMRTools.NMRBase.add_offset","text":"add_offset!(data::NMRData, dim_ref, offset)\n\nAdd an offset to a frequency dimension in an NMRData object. The dimension can be specified as a numerical index or an object like F1Dim. The metadata is copied using replacedimension, and an entry is added or updated in the dimension metadata to record the offset change.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.apod","page":"API","title":"NMRTools.NMRBase.apod","text":"apod(spec::NMRData, dimension, zerofill=true)\n\nReturn the time-domain apodization function for the specified axis, as a vector of values.\n\n\n\n\n\n","category":"function"},{"location":"api/#NMRTools.NMRBase.coherenceorder","page":"API","title":"NMRTools.NMRBase.coherenceorder","text":"coherenceorder(coherence)\n\nCalculate the total coherence order.\n\nExamples\n\njulia> coherenceorder(SQ(H1))\n1\n\njulia> coherenceorder(MQ(((H1,1),(C13,1))))\n2\n\njulia> coherenceorder(MQ(((H1,1),(C13,-1))))\n0\n\njulia> coherenceorder(MQ(((H1,3),(C13,1))))\n4\n\njulia> coherenceorder(MQ(((H1,0),)))\n0\n\nSee also Nucleus, SQ, MQ.\n\n\n\n\n\n","category":"function"},{"location":"api/#NMRTools.NMRBase.data-Tuple{NMRData, Any}","page":"API","title":"NMRTools.NMRBase.data","text":"data(nmrdata, dim)\n\nReturn the numerical data associated with the specified dimension.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.data-Tuple{NMRData}","page":"API","title":"NMRTools.NMRBase.data","text":"data(nmrdata)\n\nReturn the numerical data associated with the specified NMRData.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.data-Tuple{NMRDimension}","page":"API","title":"NMRTools.NMRBase.data","text":"data(nmrdimension)\n\nReturn the numerical data associated with an NMR dimension.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.decimate","page":"API","title":"NMRTools.NMRBase.decimate","text":"decimate(data, n dims=1)\n\nDecimate NMR data into n-point averages along the specified dimension. Note that data are averaged and not summed. Noise metadata is not updated.\n\n\n\n\n\n","category":"function"},{"location":"api/#NMRTools.NMRBase.estimatenoise!-Tuple{NMRData}","page":"API","title":"NMRTools.NMRBase.estimatenoise!","text":"estimatenoise!(nmrdata)\n\nEstimate the rms noise level in the data and update :noise metadata.\n\nIf called on an Array of data, each item will be updated.\n\nAlgorithm\n\nData are sorted into numerical order, and the highest and lowest 12.5% of data are discarded (so that 75% of the data remain). These values are then fitted to a truncated gaussian distribution via maximum likelihood analysis.\n\nThe log-likelihood function is:\n\nlog L(mu sigma) = sum_ilog P(y_i mu sigma)\n\nwhere the likelihood of an individual data point is:\n\nlog P(ymusigma) =\n    logfrac\n        phileft(fracx-musigmaright)\n    \n        sigma cdot leftPhileft(fracb-musigmaright) -\n            Phileft(fraca-musigmaright)right\n\nand phi(x) and Phi(x) are the standard normal pdf and cdf functions.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.getω-Tuple{FrequencyDimension, Any}","page":"API","title":"NMRTools.NMRBase.getω","text":"getω(axis, δ)\n\nReturn the offset (in rad/s) for a chemical shift (or list of shifts) on a frequency axis.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.getω-Tuple{FrequencyDimension}","page":"API","title":"NMRTools.NMRBase.getω","text":"getω(axis)\n\nReturn the offsets (in rad/s) for points along a frequency axis.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.gyromagneticratio","page":"API","title":"NMRTools.NMRBase.gyromagneticratio","text":"gyromagneticratio(n::Nucleus)\ngyromagneticratio(c::Coherence)\n\nReturn the gyromagnetic ratio in Hz/T of a nucleus, or calculate the effective gyromagnetic ratio of a coherence. This is equal to the product of the individual gyromagnetic ratios with their coherence orders.\n\nReturns nothing if not defined.\n\nExamples\n\njulia> gyromagneticratio(H1)\n2.6752218744e8\n\njulia> gyromagneticratio(SQ(H1))\n2.6752218744e8\n\njulia> gyromagneticratio(MQ(((H1,1),(C13,1))))\n3.3480498744e8\n\njulia> gyromagneticratio(MQ(((H1,0),)))\n0.0\n\nSee also Nucleus, Coherence.\n\n\n\n\n\n","category":"function"},{"location":"api/#NMRTools.NMRBase.hasnonfrequencydimension-Union{Tuple{NMRData{T, N, A, R, A1} where {R<:Tuple, A1<:AbstractArray{T, N}}}, Tuple{A}, Tuple{N}, Tuple{T}} where {T, N, A}","page":"API","title":"NMRTools.NMRBase.hasnonfrequencydimension","text":"hasnonfrequencydimension(spectrum)\n\nReturn true if the spectrum contains a non-frequency domain dimension.\n\nExample\n\njulia> y2=loadnmr(\"exampledata/2D_HN/test.ft2\");\njulia> hasnonfrequencydimension(y2)\nfalse\njulia> y3=loadnmr(\"exampledata/pseudo3D_HN_R2/ft/test%03d.ft2\");\njulia> hasnonfrequencydimension(y3)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.label!","page":"API","title":"NMRTools.NMRBase.label!","text":"label!(nmrdata, labeltext)\nlabel!(nmrdata, dim, labeltext)\nlabel!(nmrdimension, labeltext)\n\nSet the label associated with an NMRData structure or an NMRDimension.\n\nSee also label.\n\n\n\n\n\n","category":"function"},{"location":"api/#NMRTools.NMRBase.lineshape-Tuple{Any, Any, Any, LineshapeComplexity}","page":"API","title":"NMRTools.NMRBase.lineshape","text":"lineshape(axis, δ, R2, complexity=RealLineshape())\n\nReturn a simulated real- or complex-valued spectrum for a resonance with chemical shift δ and relaxation rate R2, using the parameters and window function associated with the specified axis.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.missingval","page":"API","title":"NMRTools.NMRBase.missingval","text":"missingval(x)\n\nReturns the value representing missing data in the dataset.\n\n\n\n\n\n","category":"function"},{"location":"api/#NMRTools.NMRBase.pcls-Tuple{AbstractMatrix, AbstractVector}","page":"API","title":"NMRTools.NMRBase.pcls","text":"pcls(A, y)\n\nCompute the phase-constrained least squares solution:\n\ny = A x e^iphi\n\nfollowing the algorithm of Bydder (2010) Lin Alg & Apps.\n\nReturns the tuple (x, ϕ), containing the component amplitudes and global phase.\n\nIf passed a matrix Y, the function will return a matrix of component amplitudes and a list of global phases corresponding to each row.\n\nArguments\n\nA: (m,n) complex matrix with component spectra\ny: (m,) complex vector containing the observed spectrum\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.replacedimension-Tuple{NMRData, Any, Any}","page":"API","title":"NMRTools.NMRBase.replacedimension","text":"replacedimension(nmrdata, olddimnumber, newdim)\n\nReturn a new NMRData, in which the numbered axis is replaced by a new Dimension.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.scale-Tuple{AbstractNMRData}","page":"API","title":"NMRTools.NMRBase.scale","text":"scale(d::AbstractNMRData)\n\nReturn a scaling factor for the data combining the number of scans, receiver gain, and, if specified, the sample concentration.\n\nmathrmscale = mathrmns cdot mathrmrg cdot mathrmconc\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.setgradientlist-Tuple{}","page":"API","title":"NMRTools.NMRBase.setgradientlist","text":"setgradientlist(A::NMRData, [dimnumber], relativegradientlist, Gmax=nothing)\n\nReturn a new NMRData with a gradient axis containing the passed values. If no maximum strength is specified, a default gradient strength of 0.55 T m⁻¹ will be set, but a warning raised for the user.\n\nIf a dimension number is specified, that dimension will be replaced. If not, the function will search for a unique non-frequency dimension, and replace that. If there are multiple non-frequency dimensions, the dimension number must be specified explicitly, and the function will throw an error.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.setkinetictimes-Tuple{}","page":"API","title":"NMRTools.NMRBase.setkinetictimes","text":"setkinetictimes(A::NMRData, [dimnumber], tvals, units=\"\")\n\nReturn a new NMRData with a kinetic time axis containing the passed values (and optionally, units). If a dimension number is specified, that dimension will be replaced with a TkinDim. If not, the function will search for a unique non-frequency dimension, and replace that. If there are multiple non-frequency dimensions, the dimension number must be specified explicitly, and the function will throw an error.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.setrelaxtimes-Tuple{}","page":"API","title":"NMRTools.NMRBase.setrelaxtimes","text":"setrelaxtimes(A::NMRData, [dimnumber], tvals, units=\"\")\n\nReturn a new NMRData with a relaxation time axis containing the passed values (and optionally, units). If a dimension number is specified, that dimension will be replaced with a TrelaxDim. If not, the function will search for a unique non-frequency dimension, and replace that. If there are multiple non-frequency dimensions, the dimension number must be specified explicitly, and the function will throw an error.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRBase.spin-Tuple{Nucleus}","page":"API","title":"NMRTools.NMRBase.spin","text":"spin(n::Nucleus)\n\nReturn the spin quantum number of nucleus n, or nothing if not defined.\n\nExamples\n\njulia> spin(H1)\n1//2\n\nSee also Coherence.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRIO","page":"API","title":"NMRIO","text":"","category":"section"},{"location":"api/#NMRTools.NMRIO.FQList","page":"API","title":"NMRTools.NMRIO.FQList","text":"FQList(values, unit::Symbol, relative::Bool)\n\nRepresents a frequency list. unit can be :Hz or :ppm, and relative indicates whether the frequency is given relative to SFO (true) or BF (false).\n\nRaw values can be extracted using the data function, or (better) as absolute chemical shifts (in ppm) or relative offsets (in Hz) using getppm and getoffset functions.\n\nSee also: getppm, getoffset.\n\n\n\n\n\n","category":"type"},{"location":"api/#NMRTools.NMRIO.getformat-Tuple{Any}","page":"API","title":"NMRTools.NMRIO.getformat","text":"getformat(filename)\n\nTake an input filename and return either :ucsf, :nmrpipe, :pdata (bruker processed), or :unknown after checking whether the filename matches any known format.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.getoffset-Tuple{FQList, FrequencyDimension}","page":"API","title":"NMRTools.NMRIO.getoffset","text":"getoffset(f::FQList, ax::FrequencyDimension)\n\nReturn frequency list values as offsets relative to the spectrometer frequency, in Hz.\n\nSee also: getppm\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.getppm-Tuple{FQList, FrequencyDimension}","page":"API","title":"NMRTools.NMRIO.getppm","text":"getppm(f::FQList, ax::FrequencyDimension)\n\nReturn frequency list values in ppm (in absolute terms, i.e. relative to 0 ppm).\n\nSee also: getoffset\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.loadnmr-Tuple{Any}","page":"API","title":"NMRTools.NMRIO.loadnmr","text":"loadnmr(filename, experimentfolder=nothing)\n\nMain function for loading NMR data. experimentfolder contains the path to an experiment directory, for identification of metadata, if the filename is not directly within an experiment.\n\nReturns an NMRData structure, or throws an NMRToolsError is there is a problem.\n\nExamples\n\nnmrPipe import:\n\nloadnmr(\"exampledata/1D_1H/1/test.ft1\");\nloadnmr(\"exampledata/1D_19F/1/test.ft1\");\nloadnmr(\"exampledata/2D_HN/1/test.ft2\");\nloadnmr(\"exampledata/pseudo2D_XSTE/1/test.ft1\");\nloadnmr(\"exampledata/pseudo3D_HN_R2/1/ft/test%03d.ft2\");\n\nBruker pdata import:\n\nloadnmr(\"exampledata/1D_19F/1\");\nloadnmr(\"exampledata/1D_19F/1/\");\nloadnmr(\"exampledata/1D_19F/1/pdata/1\");\nloadnmr(\"exampledata/1D_19F/1/pdata/1/\");\n\nucsf (Sparky) import:\n\nloadnmr(\"exampledata/2D_HN/1/hmqc.ucsf\");\nloadnmr(\"exampledata/1D_19F/1/\");\nloadnmr(\"exampledata/1D_19F/1/pdata/1\");\nloadnmr(\"exampledata/1D_19F/1/pdata/1/\");\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.loadnmrpipe1d-Tuple{Any, Any, Any}","page":"API","title":"NMRTools.NMRIO.loadnmrpipe1d","text":"loadnmrpipe1d(filename, md, mdax)\n\nReturn an NMRData array containing spectrum and associated metadata.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.loadnmrpipe2d-Tuple{String, Any, Any}","page":"API","title":"NMRTools.NMRIO.loadnmrpipe2d","text":"loadnmrpipe2d(filename, md, mdax)\n\nReturn NMRData containing spectrum and associated metadata.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.loadnmrpipe3d-Tuple{String, Any, Any}","page":"API","title":"NMRTools.NMRIO.loadnmrpipe3d","text":"loadnmrpipe3d(filename, md, mdax)\n\nReturn NMRData containing spectrum and associated metadata.\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.loadpdata","page":"API","title":"NMRTools.NMRIO.loadpdata","text":"loadpdata(filename, allcomponents=false)\n\nFilename will be a reference to a pdata folder.\n\n\n\n\n\n","category":"function"},{"location":"api/#NMRTools.NMRIO.parsefqlist-Tuple{Any}","page":"API","title":"NMRTools.NMRIO.parsefqlist","text":"parsefqlist(filename)\n\nReturn contents of the specified fqlist.\n\nfqlists can have several different formats:\n\nfirst line   | reference   | unit\n\n         | sfo         | Hz\n\nsfo hz       | sfo         | Hz sfo ppm      | sfo         | ppm bf hz        | bf          | Hz bf ppm       | bf          | ppm p            | sfo         | ppm P            | bf          | ppm\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.parsenmrpipeheader-Tuple{Vector{Float32}}","page":"API","title":"NMRTools.NMRIO.parsenmrpipeheader","text":"parsenmrpipeheader(header)\n\nPass a 512 x 4 byte array containing an nmrPipe header file, and returns dictionaries of metadata. The nmrPipe header format is defined in fdatap.h.\n\nReturn values\n\nmd: dictionary of spectrum metadata\nmdax: array of dictionaries containing axis metadata\n\nExamples\n\nmd, mdax = parsenmrpipeheader(header)\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.parseucsfaxisheader-Tuple{Any}","page":"API","title":"NMRTools.NMRIO.parseucsfaxisheader","text":"parse ucsf axis header into a dictionary\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.parseucsfheader-Tuple{Any}","page":"API","title":"NMRTools.NMRIO.parseucsfheader","text":"parse ucsf file header into a dictionary\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.parsevalist-Tuple{Any}","page":"API","title":"NMRTools.NMRIO.parsevalist","text":"return valist contents in dB\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.parsevdlist-Tuple{Any}","page":"API","title":"NMRTools.NMRIO.parsevdlist","text":"return vdlist contents in seconds\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.parsevplist-Tuple{Any}","page":"API","title":"NMRTools.NMRIO.parsevplist","text":"return vplist contents in seconds\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.sumexpts-Tuple","page":"API","title":"NMRTools.NMRIO.sumexpts","text":"sumexpts(inputexpts...; out, weights=[])\n\nSum a collection of Bruker NMR experiments, with optional weighting factors. Data will be truncated to fit the shortest data file.\n\nArguments\n\ninputexpts...: Input experiment names (strings or integers)\nout: Output experiment name (string or integer)\nweights: Optional vector of weights for each input experiment\n\nDetails\n\nExperiment names should be either strings with filenames or integers converted to strings\nIf weights are supplied, the length must match the number of input experiments\nFirst input experiment is used as a template for the output experiment\nFor 1D experiments, 'fid' files are added; for nD experiments, 'ser' files are added\nProcessed data files in pdata/1 are removed, other pdata subdirectories are deleted\nUpdates the title file with information about the summed experiments\nUpdates the number of scans in the acqus file to be the sum of individual experiments\nPrompts before overwriting any existing experiment\n\n\n\n\n\n","category":"method"},{"location":"api/#NMRTools.NMRIO.topspinversion-Tuple{Any}","page":"API","title":"NMRTools.NMRIO.topspinversion","text":"parsetopspinversion(acqusfilename)\n\nReturn the TopSpin version as a VersionNumber (e.g. v\"4.2.0\").\n\nThis is obtained from the end of the first line of the acqus file, e.g.\n\n##TITLE= Parameter file, TopSpin 4.2.0\n##TITLE= Parameter file, TOPSPIN\t\tVersion 2.1\n##TITLE= Parameter file, TOPSPIN\t\tVersion 3.2\n\n\n\n\n\n","category":"method"},{"location":"tutorial-metadata/#Metadata","page":"Metadata","title":"Metadata","text":"","category":"section"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"NMRData objects contain comprehensive metadata on processing and acquisition parameters. These are populated automatically when loading a spectrum. Entries are divided into spectrum metadata – associated with the experiment in general – and axis metadata, that are associated with a particular dimension of the data.","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"Examples of spectrum metadata include: number of scans, receiver gain, pulse program, experiment title, number of dimensions, noise level (calculated when the spectrum is loaded), acquisition parameters (pulse lengths etc, from the acqus file), contents of auxilliary files (e.g. vclists and vdlists).","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"Examples of axis metadata include: the number of points, the original time domain size (before zero filling, linear prediction or extraction of a subregion), carrier frequency, spectrum width, window function used for processing.","category":"page"},{"location":"tutorial-metadata/#Accessing-spectrum-metadata","page":"Metadata","title":"Accessing spectrum metadata","text":"","category":"section"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"Metadata are stored in a dictionary labelled by symbols such as :ns or :pulseprogram. This dictionary can be accessed using the metadata function.","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"using NMRTools\n# load an example 2D 1H,15N HMQC spectrum\nspec = exampledata(\"2D_HN\")\n\nmetadata(spec)","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"For convenience, entries can be accessed by passing a second argument to the metadata function:","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"metadata(spec, :title)","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"or directly from the spectrum using a dictionary-style lookup:","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"spec[:ns]","category":"page"},{"location":"tutorial-metadata/#Accessing-axis-metadata","page":"Metadata","title":"Accessing axis metadata","text":"","category":"section"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"Axis metadata can be accessed by providing an additional argument to the metadata function, specifying the axis numerically:","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"metadata(spec, 1)","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"Axes can also be accessed by their type, e.g. F1Dim or F2Dim:","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"metadata(spec, F2Dim)","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"Again, for convenience entries can be accessed by passing an additional argument to the metadata function:","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"metadata(spec, F1Dim, :label)","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"or directly from the spectrum object using a dictionary-style lookup alongside an axis reference:","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"spec[2, :offsetppm]","category":"page"},{"location":"tutorial-metadata/#Accessing-acquisition-parameters","page":"Metadata","title":"Accessing acquisition parameters","text":"","category":"section"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"Spectrometer acquisition parameters are automatically parsed from the acqus file when data are loaded. This is stored as a dictionary in the :acqus entry of the spectrum metadata, but can more conveniently be accessed through the function acqus(spec, parametername). Parameter names can be provided either as strings (case insensitive, e.g. \"TE\" for the temperature) or as lowercase symbols (e.g. :te).","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"acqus(spec, :te)","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"Arrayed parameters such as pulse lengths are returned as dictionaries:","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"acqus(spec, :p)","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"For convenience, particular entries can be accessed directly by supplying an additional index parameter:","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"acqus(spec, :cnst, 4)","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"note: Note\nArrayed parameters such as pulse lengths, delays, etc. are returned as dictionaries rather than lists to avoid indexing confusion between Bruker arrays, which are zero-based, and Julia arrays, which are unit-based.","category":"page"},{"location":"tutorial-metadata/#Auxiliary-files","page":"Metadata","title":"Auxiliary files","text":"","category":"section"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"If present, files such as vclist and vdlist are imported and can be accessed through the acqus function:","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"relaxation_experiment = exampledata(\"pseudo3D_HN_R2\")\nacqus(relaxation_experiment, :vclist)","category":"page"},{"location":"tutorial-metadata/#Window-functions","page":"Metadata","title":"Window functions","text":"","category":"section"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"The window functions used for data processing are identified when experiments are loaded. These are represented by subtypes of WindowFunction, which contain appropriate parameters specifying the particular function applied together with the acquisition time t_mathrmmax (calculated at the point of application, i.e. after linear prediction but before zero filling).","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"Window functions are stored as axis metadata and can be accessed through the :window parameter:","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"spec[2, :window] # get the window function for the second dimension","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"Available window functions are:","category":"page"},{"location":"tutorial-metadata/","page":"Metadata","title":"Metadata","text":"NullWindow(tmax): no window function applied\nUnknownWindow(tmax): unrecognised window function\nExponentialWindow(lb, tmax): line broadening specified in Hz\nSineWindow(offset, endpoint, power, tmax): a supertype encompassing some special cases\nCosWindow(tmax): apodization by a pure half-cosine window\nCos²Window(tmax): apodization by a pure half-cosine-squared window\nGeneralSineWindow(offset, endpoint, power, tmax): other general cases\nGaussWindow(expHz, gaussHz, center, tmax): a supertype encompassing some special cases\nLorentzToGaussWindow(expHz, gaussHz, tmax)\nGeneralGaussWindow(expHz, gaussHz, center, tmax): other general cases","category":"page"},{"location":"ref-windows/#Window-functions","page":"Window functions","title":"Window functions","text":"","category":"section"},{"location":"ref-dimensions/#Data","page":"Data","title":"Data","text":"","category":"section"},{"location":"metadata/#Metadata","page":"Metadata","title":"Metadata","text":"","category":"section"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"NMRData objects contain comprehensive metadata on processing and acquisition parameters that are populated automatically upon loading a spectrum. Entries are divided into spectrum metadata - associated with the experiment in general - and axis metadata, that are associated with a particular dimension of the data.","category":"page"},{"location":"metadata/#Accessing-spectrum-metadata","page":"Metadata","title":"Accessing spectrum metadata","text":"","category":"section"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"Metadata entries are labelled by symbols such as :ns or :pulseprogram. See below for a list of all available symbols. Entries can be accessed using the metadata function, or directly as a dictionary-style lookup","category":"page"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"using NMRTools; # hide\nspec = exampledata(\"2D_HN\"); # hide\nmetadata(spec, :ns)\nspec[:ns]\nmetadata(spec, :title)\nspec[:title]","category":"page"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"Help on metadata symbols is available","category":"page"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"metadatahelp(:td)","category":"page"},{"location":"metadata/#Accessing-axis-metadata","page":"Metadata","title":"Accessing axis metadata","text":"","category":"section"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"Axis metadata can be accessed by providing an addition axis label, i.e. F1Dim, F2Dim.","category":"page"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"metadata(spec, F1Dim, :label)\nspec[F1Dim, :label]\nspec[1, :label]\nmetadata(spec, F2Dim, :label)\nspec[F2Dim, :label]\nspec[2, :label]","category":"page"},{"location":"metadata/#Accessing-acquisition-parameters","page":"Metadata","title":"Accessing acquisition parameters","text":"","category":"section"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"Spectrometer acquisition parameters are automatically parsed from the acqus file when data are loaded. This is stored as a dictionary in the :acqus entry of the spectrum metadata, but can more conveniently be accessed through the convenience function acqus(spec, :parametername). Note that parameter names are not case sensitive.","category":"page"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"acqus(spec, :bf1)\nacqus(spec, :te)","category":"page"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"Arrayed parameters such as pulse lengths can be accessed as lists or by supplying an additional index parameter","category":"page"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"acqus(spec, :p)\nacqus(spec, :p, 1)\nacqus(spec, :cnst, 4)","category":"page"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"note: Note\nLists of parameters are returned as zero-based arrays (in contrast to typical Julia arrays, which are unit-based) to match Bruker naming conventions","category":"page"},{"location":"metadata/#Auxiliary-files","page":"Metadata","title":"Auxiliary files","text":"","category":"section"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"If present, files such as vclist and vdlist are imported and can be accessed through the acqus function","category":"page"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"pseudo3dspec = exampledata(\"pseudo3D_HN_R2\"); # hide\nacqus(pseudo3dspec, :vclist)","category":"page"},{"location":"metadata/#Available-spectrum-metadata-symbols","page":"Metadata","title":"Available spectrum metadata symbols","text":"","category":"section"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"symbol description\n:filename original filename or template\n:format :NMRPipe or :bruker\n:title contents of pdata/1/title\n:label first line of title, used for captions\n:pulseprogram pulse program (PULPROG) from acqus file\n:ndim number of dimensions\n:acqusfilename path to associated acqus file\n:acqus dictionary of acqus data\n:ns number of scans\n:rg receiver gain\n:noise rms noise level","category":"page"},{"location":"metadata/#Available-axis-metadata-symbols","page":"Metadata","title":"Available axis metadata symbols","text":"","category":"section"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"symbol description\n:pseudodim flag indicating non-frequency domain data\n:npoints final number of (real) data points in dimension (after extraction)\n:td number of complex points acquired\n:tdzf number of complex points when FT executed, including LP and ZF\n:bf base frequency, in MHz\n:sf carrier frequency, in MHz\n:offsethz carrier offset from bf, in Hz\n:offsetppm carrier offset from bf, in ppm\n:swhz spectrum width, in Hz\n:swppm spectrum width, in ppm\n:region extracted region, expressed as a range in points, otherwise missing\n:window WindowFunction object indicating applied apodization","category":"page"},{"location":"metadata/#Window-functions","page":"Metadata","title":"Window functions","text":"","category":"section"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"Window functions are represented by subtypes of the abstract type WindowFunction, each of which contain appropriate parameters to specify the particular function applied. In addition, the acquisition time t_max is also stored (calculated at the point of application, i.e. after linear prediction but before zero filling).","category":"page"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"Available window functions:","category":"page"},{"location":"metadata/","page":"Metadata","title":"Metadata","text":"NullWindow(tmax): no window function applied\nUnknownWindow(tmax): unrecognised window function\nExponentialWindow(lb, tmax): line broadening specified in Hz\nSineWindow(offset, endpoint, power, tmax): a supertype encompassing some special cases\nCosWindow(tmax): apodization by a pure half-cosine window\nCos²Window(tmax): apodization by a pure half-cosine-squared window\nGeneralSineWindow(offset, endpoint, power, tmax): other general cases\nGaussWindow(expHz, gaussHz, center, tmax): a supertype encompassing some special cases\nLorentzToGaussWindow(expHz, gaussHz, tmax)\nGeneralGaussWindow(expHz, gaussHz, center, tmax): other general cases","category":"page"},{"location":"tutorial-data/#Working-with-NMR-data","page":"Working with NMR data","title":"Working with NMR data","text":"","category":"section"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"NMR measurements are arrays of data, with additional numerical data associated with each dimension, or axis. Within NMRTools, these data are stored as NMRData structures, which provides a convenient way to encapsulate both the data, axis information, and additional metadata providing information on acquisition or processing.","category":"page"},{"location":"tutorial-data/#Loading-NMR-data","page":"Working with NMR data","title":"Loading NMR data","text":"","category":"section"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"NMR data are loaded using the loadnmr function. This can handle processed Bruker experiments, or NMRPipe-format data.","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"# load bruker experiment number 1 from a directory '2D_HN'\n# by default, NMRTools will load bruker processed data from proc 1\nspec2d = loadnmr(\"exampledata/2D_HN/1\")\n\n# load a different processed spectrum\nspec1d = loadnmr(\"exampledata/2D_HN/1/pdata/101\")\n\n# load data from NMRPipe format, using a template\nspec3d = loadnmr(\"exampledata/pseudo3D_HN_R2/1/ft/test%03d.ft2\")","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"tip: Tip\nloadnmr will attempt to locate and parse acquisition metadata, such as acqus files. If the spectrum file is located elsewhere (for example, if you are loading a file that was processed with NMRPipe), then you can specify the path to the experiment folder using the experimentfolder keyword argument.","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"When spectra are loaded, a simple algorithm runs to estimate the noise level, which is often used for subsequent plotting commands.","category":"page"},{"location":"tutorial-data/#Manipulating-spectrum-data","page":"Working with NMR data","title":"Manipulating spectrum data","text":"","category":"section"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"NMRData structures encapsulate a standard Julia array. This can be accessed using the data command. However, through the magic of multiple dispatch, most operations will work transparently on NMRData variables as if they are regular arrays, with the added benefit that axis information and metadata are preserved. Data can be sliced and accessed like a regular array using the usual square brackets:","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"spec1d[100:105]\nspec2d[3:4, 10:14]","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"However, more conveniently, value-based selectors can also be used to locate data using chemical shifts. Three selectors are defined:","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"At(x): select data precisely at the specified value\nNear(x): select data at the nearest matching position\nx .. y: select the range of data between x and y (closed interval)","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"For example:","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"spec1d[8.2 .. 8.3] # select between 8.2 and 8.3 ppm\nspec2d[Near(8.25), 123 .. 124] # select near 8.25 ppm in the first dimension\n                               # and between 123 and 124 ppm in the second dimension","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"When data are sliced, new NMRData structures are created and their axes are updated to match the new data size.","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"warning: Warning\nWhen NMRData structures are sliced, copied, or otherwise modified, they inherit the same dictionary of metadata as the original variable. This means that any changes to metadata will affect both variables. To resolve this, make a deepcopy of the variable. Note also that any acquisition metadata might not reflect the correct shape of the data any more.","category":"page"},{"location":"tutorial-data/#Accessing-axis-data","page":"Working with NMR data","title":"Accessing axis data","text":"","category":"section"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"Information on data dimensions is stored in NMRDimension structures. These can be accessed with the dims function:","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"# get the first dimension of this two-dimensional experiment\nusing NMRTools # hide\nspec2d = exampledata(\"2D_HN\"); # hide\ndims(spec2d, 1)","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"NMRDimensions can be treated like vectors (one-dimensional arrays) for most purposes, including indexing and slicing. Value-based selectors can also be used, as for spectrum data. Like spectrum data, the underlying numerical data can be accessed if needed using the data function.","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"A heirarchy of types are defined for NMR dimensions, reflecting the variety of different experiments:","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"NMRDimension\nFrequencyDimension: with specific types F1Dim to F4Dim\nNonFrequencyDimension\nTimeDimension:\nTrelaxDim: for relaxation times\nTkinDim: for kinetic evolution times\nT1Dim to T4Dim: for general frequency evolution periods\nGradientDimension: for e.g. diffusion measurements, with specific types G1Dim to G4Dim\nUnknownDimension: with specific types X1Dim to X4Dim","category":"page"},{"location":"tutorial-data/#Chemical-shift-referencing","page":"Working with NMR data","title":"Chemical shift referencing","text":"","category":"section"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"The add_offset function allows you to adjust the referencing of your NMR spectrum by adding a specified offset to the chemical shift values along a given dimension. This can be useful if you need to correct referencing errors or align spectra.","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"To use add_offset, you need to specify the NMRData object, the dimension to adjust, and the offset value to add. Here is a simple example:","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"using NMRTools, Plots #hide\n\n# Load example data\nspec2d_original = exampledata(\"2D_HN\")\n\n# Add an offset of 0.1 ppm to the first dimension (specified as a number)\nspec2d = add_offset(spec2d_original, 1, 0.1)\n\n# Add a further offset of -0.5 ppm to the second dimension (specified as F2Dim)\nspec2d = add_offset(spec2d, F2Dim, -0.5)\n\nlabel!(spec2d_original, \"unreferenced\")\nlabel!(spec2d, \"referenced\")\nplot([spec2d_original, spec2d])\nsavefig(\"plot-offset.svg\"); nothing # hide","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"(Image: )","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"In this example, the chemical shift values in the first dimension of spec2d are increased by 0.1 ppm, and the values in the second dimension are decreased by 0.5 ppm.","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"note: Note\nThe add_offset function will adjust metadata (:offsetppm, :offsethz and :sf) to keep track of the altered referencing. A new metadata entry :referenceoffset will be created to keep track of this referencing.","category":"page"},{"location":"tutorial-data/#Accessing-metadata","page":"Working with NMR data","title":"Accessing metadata","text":"","category":"section"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"NMRData objects contain comprehensive metadata on processing and acquisition parameters that are populated automatically upon loading a spectrum. Entries are divided into spectrum metadata - associated with the experiment in general - and axis metadata, that are associated with a particular dimension of the data.","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"Metadata entries are labelled by symbols such as :ns or :pulseprogram. Entries can be accessed using the metadata function, or directly as a dictionary-style lookup:","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"spec2d = exampledata(\"2D_HN\"); # hide\nmetadata(spec2d, :ns)\nspec2d[:title]","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"Acquisition parameters from Bruker acqus files are also parsed when loading data, and can be accessed using the acqus function. Parameters are specified either as lower-case symbols or strings (not case-sensitive). An index can be specified for arrayed parameters such as pulse lengths or delays.","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"acqus(spec2d, \"TE\")\nacqus(spec2d, :p, 1)","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"Axis metadata can be accessed by providing an additional label, which can either be numerical or the appropriate NMRDimension type, such as F1Dim etc:","category":"page"},{"location":"tutorial-data/","page":"Working with NMR data","title":"Working with NMR data","text":"metadata(spec2d, F2Dim, :label)\nspec2d[2, :bf]\nspec2d[F2Dim, :window]","category":"page"},{"location":"ref-plots/#Plotting-with-JuliaPlots","page":"Plotting with JuliaPlots","title":"Plotting with JuliaPlots","text":"","category":"section"},{"location":"ref-data/#Data","page":"Data","title":"Data","text":"","category":"section"},{"location":"quickstart/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"quickstart/#Installing-NMRTools","page":"Getting started","title":"Installing NMRTools","text":"","category":"section"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"The Distributions package is available through the Julia package system by running Pkg.add(\"NMRTools\"). Throughout, we assume that you have installed the package.","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"The examples in this tutorial also using the Plots package, which can be obtained similarly.","category":"page"},{"location":"quickstart/#Plot-a-1D-spectrum","page":"Getting started","title":"Plot a 1D spectrum","text":"","category":"section"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"Let's load some example data. This can be a Bruker experiment directory, a specific pdata folder, or an NMRPipe-format file.","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"using NMRTools, Plots\nspec = exampledata(\"1D_19F\")","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"NMRTools contains Plots recipes for common types of spectrum. To plot our 1D spectrum, we just use the plot command:","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"plot(spec)\nsavefig(\"plot-y.svg\"); nothing # hide","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"(Image: )","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"We could zoom in on a particular region using the usual xlims arguments from Plots, but we can also select a chemical shift range from the data directly. To do this, we use square brackets [...] to access the data like an array, but use the .. selector to specify our chemical shift range:","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"plot(spec[-124.5 .. -123])\nsavefig(\"plot-y2.svg\"); nothing # hide","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"(Image: )","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"All plots can be saved as high quality vector graphics or png files, using the savefig command:","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"savefig(\"myspectrum.pdf\")","category":"page"},{"location":"quickstart/#Plot-a-2D-spectrum","page":"Getting started","title":"Plot a 2D spectrum","text":"","category":"section"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"Two-dimensional spectra can be plotted in exactly the same way as for 1Ds.","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"using NMRTools, Plots # hide\nspec = exampledata(\"2D_HN\")\nplot(spec)\nsavefig(\"plot-2d.svg\"); nothing # hide","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"(Image: )","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"Contour levels are set to five times the noise level. The most convenient way to adjust this is simply to multiply or divide the spectrum by some scaling factor. You can also adjust the title - by default taken from the spectrum label - using the title keyword. Use an empty string (title=\"\") to remove the title.","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"plot(spec / 2, title=\"spectrum divided by two\")\nsavefig(\"plot-2d-scaled.svg\"); nothing # hide","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"(Image: )","category":"page"},{"location":"quickstart/#Accessing-your-data","page":"Getting started","title":"Accessing your data","text":"","category":"section"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"Spectrum data and associated axis information, metadata, etc, is encapsulated in an NMRData structure.","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"using NMRTools # hide\nspec = exampledata(\"1D_19F\")","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"Data can be accessed with conventional array indexing, but also using the value-based selectors, Near and ..:","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"spec[100:105]\nspec[Near(-124)]\nspec[-124 .. -123.5]","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"This also works for multidimensional data. For example:","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"spec2d = exampledata(\"2D_HN\")\nspec2d[8.1 .. 8.3, Near(124)]","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"A plain array of data for the spectrum can be obtained from this using the data command:","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"data(spec)","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"Similarly, a plain vector containing axis values can be obtained from this using the data command, passing an additional argument to specify the dimension. This can either be a number or the axis type, e.g. F1Dim:","category":"page"},{"location":"quickstart/","page":"Getting started","title":"Getting started","text":"data(spec, 1)","category":"page"},{"location":"tutorial-diffusion/#1D-diffusion-analysis","page":"Diffusion analysis","title":"1D diffusion analysis","text":"","category":"section"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"Let's analyse a 15N-edited XSTE measurement of translational diffusion. This experiment was acquired as a single pseudo-2D measurement, with gradient strengths ranging from 2 to 98% of the maximum strength, 0.55 T/m.","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"First, we need to load the required packages. We will use LsqFit for the non-linear least squares fitting, Measurements to handle uncertainties, and Statistics for calculation of means and standard deviations.","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"using NMRTools\nusing Plots\nusing LsqFit\nusing Measurements\nusing Statistics\n\nspec = exampledata(\"pseudo2D_XSTE\")","category":"page"},{"location":"tutorial-diffusion/#Set-up-parameters","page":"Diffusion analysis","title":"Set up parameters","text":"","category":"section"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"The file we have just loaded has an UnknownDimension as the non-frequency dimension. We need to replace this with a GradientDimension and set the gradient strengths that were used. We do this with the setgradientlist function:","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"gradients = LinRange(0.02, 0.98, size(spec, X2Dim))\nGmax = 0.55 # T/m\n\nspec = setgradientlist(spec, gradients, Gmax)","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"Next, we extract or set other acquisition parameters required for analysis. In particular, we extract the diffusion pulse length, δ, and the diffusion delay, Δ, from the acqus file. We also specify the chemical shift ranges used for plotting, fitting, and for determination of the noise level.","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"δ = acqus(spec, :p, 30) * 2e-6 # gradient pulse length = p30/2\nΔ = acqus(spec, :d, 20)        # diffusion delay = d20\nσ = 0.9                        # gradient pulse shape factor (for SMSQ10)\n\ncoherence = SQ(H1)             # coherence for diffusion encoding\nγ = gyromagneticratio(coherence)            # calculate effective gyromagnetic ratio\n\ng = data(spec, G2Dim)          # list of gradient strengths\n\n# select chemical shift ranges for plotting and fitting\nplotrange = 6 .. 10 # ppm\ndatarange = 7.7 .. 8.6 # ppm\nnoiseposition = 10.5 # ppm\nnothing # hide","category":"page"},{"location":"tutorial-diffusion/#Plot-the-data","page":"Diffusion analysis","title":"Plot the data","text":"","category":"section"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"To take a quick look at the data, we can plot the experiment either as 3D lines using the plot command, or as a heatmap:","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"plot(\n    plot(spec[plotrange,:]),\n    heatmap(spec[plotrange,:])\n)\nsavefig(\"tutorial-diffusion-plot.svg\"); nothing # hide","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"(Image: )","category":"page"},{"location":"tutorial-diffusion/#Calculate-noise-and-peak-integrals","page":"Diffusion analysis","title":"Calculate noise and peak integrals","text":"","category":"section"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"Now, we can determine the measurement noise, by taking the standard deviation of integrals across the different gradient points:","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"# create a selector for the noise, matching the width of the data range\nnoisewidth = datarange.right - datarange.left\nnoiserange = (noiseposition-0.5noisewidth)..(noiseposition+0.5noisewidth)\n\n# integrate over the noise regions and take the standard deviation\n# (calculate the sum over the frequency dimension F1Dim, and use\n# `data` to convert from NMRData to a regular array)\nnoise = sum(spec[noiserange,:], dims=F1Dim) |> data |> std\n\n# calculate the integral of the data region similarly, using vec to convert to a list\nintegrals = sum(spec[datarange,:], dims=F1Dim) |> data |> vec\n\n# normalise noise and integrals by the maximum value\nnoise /= maximum(integrals)\nintegrals /= maximum(integrals)\nnothing # hide","category":"page"},{"location":"tutorial-diffusion/#Fitting","page":"Diffusion analysis","title":"Fitting","text":"","category":"section"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"Now, we can fit the data to the Stejskal-Tanner equation using the LsqFit package.","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"# model parameters are (I0, D) - scale D by 1e-10 for a nicer numerical value\nmodel(g, p) = p[1] * exp.(-(γ*δ*σ*g).^2 .* (Δ - δ/3) .* p[2] .* 1e-10)\n\np0 = [1.0, 1.0] # rough guess of initial parameters\n\nfit = curve_fit(model, g, integrals, p0) # run the fit\n\n# extract the fit parameters and standard errors\npfit = coef(fit)\nerr = stderror(fit)\nD = (pfit[2] ± err[2]) * 1e-10","category":"page"},{"location":"tutorial-diffusion/#Plot-the-results","page":"Diffusion analysis","title":"Plot the results","text":"","category":"section"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"Finally, plot the results:","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"x = LinRange(0, maximum(g)*1.1, 100)\nyfit = model(x, pfit)\n\np1 = scatter(g, integrals .± noise, label=\"observed\",\n        frame=:box,\n        xlabel=\"G (T m⁻¹)\",\n        ylabel=\"Integrated signal\",\n        title=\"\",\n        ylims=(0,Inf), # make sure y axis starts at zero\n        widen=true,\n        grid=nothing)\nplot!(p1, x, yfit, label=\"fit\")\n\np2 = plot(spec[plotrange,1],linecolor=:black)\nplot!(p2, spec[datarange,1], fill=(0,:orange), linecolor=:red)\nhline!(p2, [0], c=:grey)\ntitle!(p2, \"\")\n\nplot(p1, p2, layout=(1,2))\nsavefig(\"tutorial-diffusion-fit.svg\"); nothing # hide","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"(Image: )","category":"page"},{"location":"tutorial-diffusion/#Estimating-the-hydrodynamic-radius","page":"Diffusion analysis","title":"Estimating the hydrodynamic radius","text":"","category":"section"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"We can use the known viscosity of water as a function of temperature to estimate the hydrodynamic radius from the measured diffusion coefficient. First, we extract the temperature from the spectrum metadata:","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"T = acqus(spec, :te)","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"Next, we can create a little function to calculate viscosity for H2O or D2O solvents as a function of temperature:","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"function viscosity(solvent, T)\n\tif solvent==:h2o\n        A = 802.25336\n        a = 3.4741e-3\n        b = -1.7413e-5\n        c = 2.7719e-8\n        gamma = 1.53026\n        T0 = 225.334\n    elseif solvent==:d2o\n        A = 885.60402\n        a = 2.799e-3\n        b = -1.6342e-5\n        c = 2.9067e-8\n        gamma = 1.55255\n        T0 = 231.832\n    else\n        @error \"solvent not recognised (should be :h2o or :d2o)\"\n    end\n\n    DT = T - T0\n    k = 1.38e-23\n\t\n    return A * (DT + a*DT^2 + b*DT^3 + c*DT^4)^(-gamma)\nend\nη = viscosity(:h2o, T)","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"Finally, we can use the Stokes-Einstein equation to calculate the hydrodynamic radius:","category":"page"},{"location":"tutorial-diffusion/","page":"Diffusion analysis","title":"Diffusion analysis","text":"k = 1.38e-23\nrH = k*T / (6π * η * 0.001 * D) * 1e9 # in nm","category":"page"},{"location":"tutorial-plotrecipes/#Plotting","page":"Plotting","title":"Plotting","text":"","category":"section"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"NMRTools contains recipes for plotting common types of spectra, using the Plots package.","category":"page"},{"location":"tutorial-plotrecipes/#Plotting-a-1D-spectrum","page":"Plotting","title":"Plotting a 1D spectrum","text":"","category":"section"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"Let's load and plot an example 1D 19F spectrum, using the loadnmr and plot commands:","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"using NMRTools, Plots\nspec = exampledata(\"1D_19F\")\nplot(spec)\nsavefig(\"plot-1D.svg\"); nothing # hide","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"By default, plots are titled using the label generated when the data are loaded, which in turn comes from the first line of the title file. Titles can be removed by specifying title=\"\" in the plot command (and the title can be changed in the same manner).","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"The plot colour can also be modified, by specifying e.g. c=:black in the plot command.","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"plot(spec, title=\"\", c=:black)\nsavefig(\"plot-1D-black.svg\"); nothing # hide","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"tutorial-plotrecipes/#Zooming-in-/-setting-plot-limits","page":"Plotting","title":"Zooming in / setting plot limits","text":"","category":"section"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"The plot range can be set using the usual xlims argument or command, e.g. passing xlims=[-124,-122] as an option to the plot command.","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"Alternatively, the region of the spectrum can be selected before plotting, by using the NMRTools .. selector.","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"plot(spec[-124 .. -123])\nsavefig(\"plot-1D-zoom.svg\"); nothing # hide","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"There are two advantages of this approach. If xlims are set, the y axis will be scaled to fit the entire spectrum, including regions that are not actually displayed - this may not show your data at its best. If the data are selected before plotting, the y axis will be scaled according only to the selected region. Secondly, for large spectra, it may be quicker to plot only a subset of the data, and this can result in smaller figure sizes also.","category":"page"},{"location":"tutorial-plotrecipes/#Overlaying-multiple-1D-spectra","page":"Plotting","title":"Overlaying multiple 1D spectra","text":"","category":"section"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"Multiple experiments can conveniently be loaded from a list of filenames using the map function.","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"# create a list of bruker experiment directories\nfilenames = [\"../../exampledata/1D_19F_titration/1\",\n             \"../../exampledata/1D_19F_titration/2\",\n             \"../../exampledata/1D_19F_titration/3\",\n             \"../../exampledata/1D_19F_titration/4\",\n             \"../../exampledata/1D_19F_titration/5\",\n             \"../../exampledata/1D_19F_titration/6\",\n             \"../../exampledata/1D_19F_titration/7\",\n             \"../../exampledata/1D_19F_titration/8\",\n             \"../../exampledata/1D_19F_titration/9\",\n             \"../../exampledata/1D_19F_titration/10\",\n             \"../../exampledata/1D_19F_titration/11\"]\nspectra = map(loadnmr, filenames)\nnothing # hide","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"This creates a list (Vector) of NMRData containing the individual spectra. To plot this series of spectra, we can simply pass the list of spectra to the plot function:","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"spectra = exampledata(\"1D_19F_titration\"); # hide\nplot(spectra, xlims=(-125, -122))\nsavefig(\"plot-19F-titration.svg\"); nothing # hide","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"note: Note\nBy default, spectra are normalized according to the number of scans and receiver gain determined automatically from the spectrum metadata; this can be disabled with the normalize=false option","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"tip: Tip\nLegends are produced from the first line of the spectrum title file. The legend can be disabled using the legend=nothing option. To re-label a spectrum, use label!(spectrum, \"new label\") (or for a list of experiments, the i-th spectrum can be relabelled with label!(spectra[i], \"new label\")).","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"Stacked views can also be produced using the vstack=true option. By default, spectra are normalized according to the number of scans and receiver gain determined automatically from the spectrum metadata","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"plot(spectra, xlims=(-125, -122), vstack=true, legend=:topright)\nsavefig(\"plot-19F-stack.svg\"); nothing # hide","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"tutorial-plotrecipes/#Plotting-2D-spectra","page":"Plotting","title":"Plotting 2D spectra","text":"","category":"section"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"2D spectra can be loaded and plotted in the same way as for 1D experiments:","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"# load a bruker experiment\n# spec2d = loadnmr(\"exampledata/2D_HN/1\")\nspec2d = exampledata(\"2D_HN\")\nplot(spec2d)\nsavefig(\"plot-2D.svg\"); nothing # hide","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"As for 1Ds, plots are titled using the label generated when the data are loaded. Positive and negative contour levels are generated starting from five times the noise level.","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"The most convenient way to adjust the contour levels is simply to multiply or divide the spectrum by a scaling factor - the noise level stored within the spectrum metadata is not updated and so the contour levels will change accordingly.","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"The plot colour can also be modified, by specifying e.g. c=:purple in the plot command. The hue of the requested colour will be used to generate two shades, for positive and negative contours.","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"plot(spec2d/3, c=:purple, xlims=(6,10))\nsavefig(\"plot-2D-purple.svg\"); nothing # hide","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"Spectra can also be plotted in other formats, e.g. heatmaps:","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"heatmap(spec2d[8 .. 8.5, 120 .. 125], cbar=:right, cbtitle=\"SNR\")\nsavefig(\"plot-2D-heatmap.svg\"); nothing # hide","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"tutorial-plotrecipes/#Overlaying-multiple-2D-spectra","page":"Plotting","title":"Overlaying multiple 2D spectra","text":"","category":"section"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"Multiple 2D experiments can conveniently be loaded from a list of filenames using the map function.","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"# create a list of nmrPipe-processed experiments\nfilenames = [\"../../exampledata/2D_HN_titration/1/test.ft2\",\n             \"../../exampledata/2D_HN_titration/2/test.ft2\",\n             \"../../exampledata/2D_HN_titration/3/test.ft2\",\n             \"../../exampledata/2D_HN_titration/4/test.ft2\",\n             \"../../exampledata/2D_HN_titration/5/test.ft2\",\n             \"../../exampledata/2D_HN_titration/6/test.ft2\",\n             \"../../exampledata/2D_HN_titration/7/test.ft2\",\n             \"../../exampledata/2D_HN_titration/8/test.ft2\",\n             \"../../exampledata/2D_HN_titration/9/test.ft2\",\n             \"../../exampledata/2D_HN_titration/10/test.ft2\",\n             \"../../exampledata/2D_HN_titration/11/test.ft2\"]\nspectra2d = map(loadnmr, filenames)","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"As for 1D experiments, these can be plotted, with automatic normalisation for varying numbers of scans and receiver gain, simply by passing the list of spectra to the plot function:","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"spectra2d = exampledata(\"2D_HN_titration\"); # hide\nplot(spectra2d, legend=:topleft)\nsavefig(\"plot-2D-titration.svg\"); nothing # hide","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"A gradient of colours will automatically be generated when spectra are plotted in this way, and a legend generated from spectrum labels.","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"note: Note\nIt is recommended to plot a series of 2Ds by passing a list of spectra in a single plot call, rather than adding them to a plot one-by-one using the plot! command. This will ensure consistent normalisation between experiments. Otherwise, contour levels will be calculated independently as five times the noise level in each experiment.","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"As usual, plot limits can be adjusted with the xlims and ylims options:","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"plot(spectra2d[[1,6]], xlims=(8,8.5),ylims=(120,125))\nsavefig(\"plot-2D-lims.svg\"); nothing # hide","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"tutorial-plotrecipes/#Plotting-pseudo-2D-data","page":"Plotting","title":"Plotting pseudo-2D data","text":"","category":"section"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"Plot recipes are available for pseudo-2D data like diffusion, relaxation or kinetics.","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"# load a diffusion measurement, processed in topspin using xf2\ndiffusiondata = exampledata(\"pseudo2D_XSTE\")\n\n# set the gradient strengths - which varied from 2% to 98% of the max, over 10 points\ndiffusiondata = setgradientlist(diffusiondata, LinRange(0.02, 0.98, 10))\n\n# generate a 3D plot of the data\nplot(diffusiondata, xlims=(6,10))\nsavefig(\"plot-diff-3D.svg\"); nothing # hide","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"By default, the plot command will generate a 3D plot for pseudo-2D experiments. Heatmaps can also be generated using the heatmap command. In this example, we have selected the range to plot directly, rather than using the xlims option.","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"heatmap(diffusiondata[7..9,:])\nsavefig(\"plot-diff-heatmap.svg\"); nothing # hide","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"(Image: )","category":"page"},{"location":"tutorial-plotrecipes/#Saving-plots","page":"Plotting","title":"Saving plots","text":"","category":"section"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"All plots can be saved as high quality vector graphics, or as png files, using the savefig command.","category":"page"},{"location":"tutorial-plotrecipes/","page":"Plotting","title":"Plotting","text":"savefig(\"myspectrum.pdf\")\nsavefig(\"myspectrum.svd\")\nsavefig(\"myspectrum.png\")","category":"page"},{"location":"ref-metadata/#Metadata","page":"Metadata","title":"Metadata","text":"","category":"section"},{"location":"ref-metadata/","page":"Metadata","title":"Metadata","text":"NMRData objects can store various metadata associated with the spectrum and each of the dimensions.","category":"page"},{"location":"ref-metadata/","page":"Metadata","title":"Metadata","text":"Metadata are stored as dictionaries using symbols as keys (e.g. :ns). They can be accessed using the metadata function, or directly from an NMRData object using a dictionary-style lookup. Metadata associated with axes are accessed by providing an additional reference, either as a dimension number or type (e.g. F1Dim, F2Dim etc.).","category":"page"},{"location":"ref-metadata/","page":"Metadata","title":"Metadata","text":"metadata(nmrdata, key) # spectrum metadata\nnmrdata[key]\n\nmetadata(nmrdata, dimension, key) # axis metadata\nnmrdata[dimension, key]","category":"page"},{"location":"ref-metadata/#DimensionalData.Dimensions.Lookups.metadata-ref-metadata","page":"Metadata","title":"DimensionalData.Dimensions.Lookups.metadata","text":"metadata(nmrdata, key)\nmetadata(nmrdata, dim, key)\nmetadata(nmrdimension, key)\n\nReturn the metadata for specified key, or nothing if not found. Keys are passed as symbols.\n\nExamples (spectrum metadata)\n\n:ns: number of scans\n:ds: number of dummy scans\n:rg: receiver gain\n:ndim: number of dimensions\n:title: spectrum title (contents of title pdata file)\n:filename: spectrum filename\n:pulseprogram: title of pulse program used for acquisition\n:experimentfolder: path to experiment\n:noise: RMS noise level\n\nExamples (dimension metadata)\n\n:pseudodim: flag indicating non-frequency domain data\n:npoints: final number of (real) data points in dimension (after extraction)\n:td: number of complex points acquired\n:tdzf: number of complex points when FT executed, including LP and ZF\n:bf: base frequency, in MHz\n:sf: carrier frequency, in MHz\n:offsethz: carrier offset from bf, in Hz\n:offsetppm: carrier offset from bf, in ppm\n:swhz: spectrum width, in Hz\n:swppm: spectrum width, in ppm\n:region: extracted region, expressed as a range in points, otherwise missing\n:window: WindowFunction indicating applied apodization\n:referenceoffset: referencing (in ppm) applied to the dimension\n\nSee also estimatenoise!.\n\n\n\n\n\n","category":"function"},{"location":"ref-metadata/#Labels","page":"Metadata","title":"Labels","text":"","category":"section"},{"location":"ref-metadata/#DimensionalData.Dimensions.label-ref-metadata","page":"Metadata","title":"DimensionalData.Dimensions.label","text":"label(nmrdata)\nlabel(nmrdata, dim)\nlabel(nmrdimension)\n\nReturn a short label associated with an NMRData structure or an NMRDimension. By default, for a spectrum this is obtained from the first line of the title file. For a frequency dimension, this is normally something of the form 1H chemical shift (ppm).\n\nSee also label!.\n\n\n\n\n\n","category":"function"},{"location":"ref-metadata/#NMRTools.NMRBase.label!-ref-metadata","page":"Metadata","title":"NMRTools.NMRBase.label!","text":"label!(nmrdata, labeltext)\nlabel!(nmrdata, dim, labeltext)\nlabel!(nmrdimension, labeltext)\n\nSet the label associated with an NMRData structure or an NMRDimension.\n\nSee also label.\n\n\n\n\n\n","category":"function"},{"location":"ref-metadata/#DimensionalData.Dimensions.Lookups.units-ref-metadata","page":"Metadata","title":"DimensionalData.Dimensions.Lookups.units","text":"units(nmrdata)\nunits(nmrdata, dim)\nunits(nmrdimension)\n\nReturn the physical units associated with an NMRData structure or an NMRDimension.\n\n\n\n\n\n","category":"function"},{"location":"ref-metadata/#Acquisition-data","page":"Metadata","title":"Acquisition data","text":"","category":"section"},{"location":"ref-metadata/","page":"Metadata","title":"Metadata","text":"When spectra are loaded, the contents of the acqus file  are parsed (as are the acqu2s files etc. too, if present). These can be accessed with :acqus and :acqu2s keys, etc. For convenience though, the additional function acqus is provided to access acquisiton data directly.","category":"page"},{"location":"ref-metadata/#NMRTools.NMRBase.acqus-ref-metadata","page":"Metadata","title":"NMRTools.NMRBase.acqus","text":"acqus(nmrdata)\nacqus(nmrdata, key)\nacqus(nmrdata, key, index)\n\nReturn data from a Bruker acqus file, or nothing if it does not exist. Keys can be passed as symbols or strings. If no key is specified, a dictionary is returned representing the entire acqus file.\n\nIf present, the contents of auxilliary files such as vclist and vdlist can be accessed using this function.\n\nExamples\n\njulia> acqus(expt, :pulprog)\n\"zgesgp\"\njulia> acqus(expt, \"TE\")\n276.9988\njulia> acqus(expt, :p, 1)\n9.2\njulia> acqus(expt, \"D\", 1)\n0.1\njulia> acqus(expt, :vclist)\n11-element Vector{Int64}:\n[...]\n\nSee also metadata.\n\n\n\n\n\n","category":"function"},{"location":"ref-metadata/#Auxilliary-files","page":"Metadata","title":"Auxilliary files","text":"","category":"section"},{"location":"ref-metadata/","page":"Metadata","title":"Metadata","text":"acqus can also be used to access the contents of auxilliary files (and if not present, nothing will be returned). Note that NMRTools will perform automatic unit conversion as follows:","category":"page"},{"location":"ref-metadata/","page":"Metadata","title":"Metadata","text":":vclist: variable loopcounter\n:vdlist: variable delays, in seconds\n:valist: variable amplitude, in dB (converted from Watts if necessary)\n:vplist: variable pulse lengths, in seconds\n:fq1list up to :fq8list: frequency lists – see Frequency lists for more information.","category":"page"},{"location":"ref-metadata/#Frequency-lists","page":"Metadata","title":"Frequency lists","text":"","category":"section"},{"location":"ref-metadata/","page":"Metadata","title":"Metadata","text":"Frequency lists can be specified on the spectrometer in a number of ways - in Hz, in ppm, and relative to the spectrometer frequency or the base frequency (0 ppm). Frequency lists are therefore stored in NMRTools as FQList structures which encode this additional information.","category":"page"},{"location":"ref-metadata/#NMRTools.NMRIO.FQList-ref-metadata","page":"Metadata","title":"NMRTools.NMRIO.FQList","text":"FQList(values, unit::Symbol, relative::Bool)\n\nRepresents a frequency list. unit can be :Hz or :ppm, and relative indicates whether the frequency is given relative to SFO (true) or BF (false).\n\nRaw values can be extracted using the data function, or (better) as absolute chemical shifts (in ppm) or relative offsets (in Hz) using getppm and getoffset functions.\n\nSee also: getppm, getoffset.\n\n\n\n\n\n","category":"type"},{"location":"ref-metadata/","page":"Metadata","title":"Metadata","text":"Raw numerical data can be accessed using the data() function, but it is recommended to use getppm and getoffset functions to access frequency data safely.","category":"page"},{"location":"ref-metadata/#NMRTools.NMRIO.FQList-ref-metadata-2","page":"Metadata","title":"NMRTools.NMRIO.FQList","text":"FQList(values, unit::Symbol, relative::Bool)\n\nRepresents a frequency list. unit can be :Hz or :ppm, and relative indicates whether the frequency is given relative to SFO (true) or BF (false).\n\nRaw values can be extracted using the data function, or (better) as absolute chemical shifts (in ppm) or relative offsets (in Hz) using getppm and getoffset functions.\n\nSee also: getppm, getoffset.\n\n\n\n\n\n","category":"type"},{"location":"ref-metadata/#NMRTools.NMRIO.getppm-ref-metadata","page":"Metadata","title":"NMRTools.NMRIO.getppm","text":"getppm(f::FQList, ax::FrequencyDimension)\n\nReturn frequency list values in ppm (in absolute terms, i.e. relative to 0 ppm).\n\nSee also: getoffset\n\n\n\n\n\n","category":"function"},{"location":"ref-metadata/#NMRTools.NMRIO.getoffset-ref-metadata","page":"Metadata","title":"NMRTools.NMRIO.getoffset","text":"getoffset(f::FQList, ax::FrequencyDimension)\n\nReturn frequency list values as offsets relative to the spectrometer frequency, in Hz.\n\nSee also: getppm\n\n\n\n\n\n","category":"function"},{"location":"ref-metadata/#Standard-metadata:-spectra","page":"Metadata","title":"Standard metadata: spectra","text":"","category":"section"},{"location":"ref-metadata/","page":"Metadata","title":"Metadata","text":"Key Description\n:acqusfilename path to acqus file\n:acqus contents of acqus file, as a dictionary\n:acqu2s, :acqu3s contents of acqu2s/acqu3s files (if present)\n:experimentfolder path to experiment\n:filename spectrum filename\n:format input file format (:nmrpipe or :pdata)\n:label short label (first line of title pdata file)\n:ndim number of dimensions\n:noise RMS noise level (see estimatenoise!)\n:ns number of scans\n:pulseprogram pulse program title\n:rg receiver gain\n:title spectrum title (contents of title pdata file)\n:topspin Topspin version used for acquisition","category":"page"},{"location":"ref-metadata/#Standard-metadata:-frequency-dimensions","page":"Metadata","title":"Standard metadata: frequency dimensions","text":"","category":"section"},{"location":"ref-metadata/","page":"Metadata","title":"Metadata","text":"Key Description\n:aq acquisition time, in seconds\n:bf base frequency, in MHz\n:label short label\n:npoints final number of real data points in dimension (after extraction)\n:offsethz carrier offset from bf, in Hz\n:offsetppm carrier offset from bf, in ppm\n:pseudodim flag indicating non-frequency domain data (false for frequency domain)\n:region extracted region, expressed as a range in points, otherwise missing\n:sf carrier frequency, in MHz\n:swhz spectrum width, in Hz\n:swppm spectrum width, in ppm\n:td number of complex points acquired, including LP\n:tdzf number of complex points when FT executed, including LP and ZF\n:window WindowFunction encoding applied apodization\n:referenceoffset applied referencing, in ppm","category":"page"},{"location":"#NMRTools.jl","page":"Home","title":"NMRTools.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NMRTools.jl is a simple library for importing and plotting NMR data. Documentation may be incomplete. Interested users are recommended to check out the 'Getting started' guide and the tutorial pages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThis package is under active development and it may be a while before its features and syntax stabilises.","category":"page"},{"location":"ref-coherences/#Coherences-and-isotope-data","page":"Coherences and isotope data","title":"Coherences and isotope data","text":"","category":"section"},{"location":"ref-coherences/","page":"Coherences and isotope data","title":"Coherences and isotope data","text":"NMRTools defines commonly used nuclei and provides a framework for identifying single- and multiple-quantum coherences associated with them. Reference data on their gyromagnetic ratios, and spin quantum numbers, is also defined and accessible through simple functions.","category":"page"},{"location":"ref-coherences/#Nuclei","page":"Coherences and isotope data","title":"Nuclei","text":"","category":"section"},{"location":"ref-coherences/#NMRTools.NMRBase.Nucleus-ref-coherences","page":"Coherences and isotope data","title":"NMRTools.NMRBase.Nucleus","text":"Nucleus\n\nEnumeration of common nuclei associated with biomolecular NMR. Nuclei are named e.g. H1, C13.\n\nDefined nuclei: H1, H2, C12, C13, N14, N15, F19, P31.\n\nSee also spin, gyromagneticratio, Coherence.\n\n\n\n\n\n","category":"type"},{"location":"ref-coherences/#Coherences","page":"Coherences and isotope data","title":"Coherences","text":"","category":"section"},{"location":"ref-coherences/#NMRTools.NMRBase.Coherence-ref-coherences","page":"Coherences and isotope data","title":"NMRTools.NMRBase.Coherence","text":"Coherence\n\nAbstract supertype for representing coherences.\n\nSee also SQ, MQ.\n\n\n\n\n\n","category":"type"},{"location":"ref-coherences/#NMRTools.NMRBase.SQ-ref-coherences","page":"Coherences and isotope data","title":"NMRTools.NMRBase.SQ","text":"SQ(nucleus::Nucleus, label==\"\")\n\nRepresentation of a single quantum coherence on a given nucleus.\n\nSee also Nucleus, MQ.\n\n\n\n\n\n","category":"type"},{"location":"ref-coherences/#NMRTools.NMRBase.MQ-ref-coherences","page":"Coherences and isotope data","title":"NMRTools.NMRBase.MQ","text":"MQ(coherences, label==\"\")\n\nRepresentation of a multiple-quantum coherence. Coherences are specified as a tuple of tuples, of the form (nucleus, coherenceorder)\n\nExamples\n\njulia> MQ(((H1,1), (C13,-1)), \"ZQ\")\nMQ(((H1, 1), (C13, -1)), \"ZQ\")\n\njulia> MQ(((H1,3), (C13,1)), \"QQ\")\nMQ(((H1, 3), (C13, 1)), \"QQ\")\n\nSee also Nucleus, SQ.\n\n\n\n\n\n","category":"type"},{"location":"ref-coherences/#NMRTools.NMRBase.coherenceorder-ref-coherences","page":"Coherences and isotope data","title":"NMRTools.NMRBase.coherenceorder","text":"coherenceorder(coherence)\n\nCalculate the total coherence order.\n\nExamples\n\njulia> coherenceorder(SQ(H1))\n1\n\njulia> coherenceorder(MQ(((H1,1),(C13,1))))\n2\n\njulia> coherenceorder(MQ(((H1,1),(C13,-1))))\n0\n\njulia> coherenceorder(MQ(((H1,3),(C13,1))))\n4\n\njulia> coherenceorder(MQ(((H1,0),)))\n0\n\nSee also Nucleus, SQ, MQ.\n\n\n\n\n\n","category":"function"},{"location":"ref-coherences/#Reference-data","page":"Coherences and isotope data","title":"Reference data","text":"","category":"section"},{"location":"ref-coherences/#NMRTools.NMRBase.spin-ref-coherences","page":"Coherences and isotope data","title":"NMRTools.NMRBase.spin","text":"spin(n::Nucleus)\n\nReturn the spin quantum number of nucleus n, or nothing if not defined.\n\nExamples\n\njulia> spin(H1)\n1//2\n\nSee also Coherence.\n\n\n\n\n\n","category":"function"},{"location":"ref-coherences/#NMRTools.NMRBase.gyromagneticratio-ref-coherences","page":"Coherences and isotope data","title":"NMRTools.NMRBase.gyromagneticratio","text":"gyromagneticratio(n::Nucleus)\ngyromagneticratio(c::Coherence)\n\nReturn the gyromagnetic ratio in Hz/T of a nucleus, or calculate the effective gyromagnetic ratio of a coherence. This is equal to the product of the individual gyromagnetic ratios with their coherence orders.\n\nReturns nothing if not defined.\n\nExamples\n\njulia> gyromagneticratio(H1)\n2.6752218744e8\n\njulia> gyromagneticratio(SQ(H1))\n2.6752218744e8\n\njulia> gyromagneticratio(MQ(((H1,1),(C13,1))))\n3.3480498744e8\n\njulia> gyromagneticratio(MQ(((H1,0),)))\n0.0\n\nSee also Nucleus, Coherence.\n\n\n\n\n\n","category":"function"}]
}
